@file:JsModule("webextension-polyfill")
@file:JsQualifier("management")

package browser.management

import browser.events.Event
import kotlin.js.Promise

/**
 * Returns a list of information about installed extensions and apps.
 */
public external fun getAll(): Promise<Array<ExtensionInfo>>?

/**
 * Returns information about the installed extension, app, or theme that has the given ID.
 *
 * @param id The ID from an item of $(ref:management.ExtensionInfo).
 */
public external fun `get`(id: String): Promise<ExtensionInfo>?

/**
 * Returns information about the calling extension, app, or theme. Note: This function can be used
 * without requesting the 'management' permission in the manifest.
 */
public external fun getSelf(): Promise<ExtensionInfo>?

/**
 * Returns a list of <a href='permission_warnings'>permission warnings</a> for the given extension
 * id.
 *
 * @param id The ID of an already installed extension.
 */
public external fun getPermissionWarningsById(id: String): Promise<Array<String>>?

/**
 * Returns a list of <a href='permission_warnings'>permission warnings</a> for the given extension
 * manifest string. Note: This function can be used without requesting the 'management' permission in
 * the manifest.
 *
 * @param manifestStr Extension manifest JSON string.
 */
public external fun getPermissionWarningsByManifest(manifestStr: String): Promise<Array<String>>?

/**
 * Enables or disables an app or extension. In most cases this function must be called in the
 * context of a user gesture (e.g. an onclick handler for a button), and may present the user with a
 * native confirmation UI as a way of preventing abuse.
 *
 * @param id This should be the id from an item of $(ref:management.ExtensionInfo).
 * @param enabled Whether this item should be enabled or disabled.
 */
public external fun setEnabled(id: String, enabled: Boolean): Promise<Nothing>?

/**
 * Uninstalls a currently installed app or extension. Note: This function does not work in managed
 * environments when the user is not allowed to uninstall the specified extension/app.
 *
 * @param id This should be the id from an item of $(ref:management.ExtensionInfo).
 */
public external fun uninstall(id: String, options: UninstallOptions? = definedExternally):
    Promise<Nothing>?

/**
 * Uninstalls the calling extension. Note: This function can be used without requesting the
 * 'management' permission in the manifest. This function does not work in managed environments when
 * the user is not allowed to uninstall the specified extension/app.
 */
public external fun uninstallSelf(options: UninstallOptions? = definedExternally): Promise<Nothing>?

/**
 * Launches an application.
 *
 * @param id The extension id of the application.
 */
public external fun launchApp(id: String): Promise<Nothing>?

/**
 * Display options to create shortcuts for an app. On Mac, only packaged app shortcuts can be
 * created.
 *
 * @param id This should be the id from an app item of $(ref:management.ExtensionInfo).
 */
public external fun createAppShortcut(id: String): Promise<Nothing>?

/**
 * Set the launch type of an app.
 *
 * @param id This should be the id from an app item of $(ref:management.ExtensionInfo).
 * @param launchType The target launch type. Always check and make sure this launch type is in
 * $(ref:ExtensionInfo.availableLaunchTypes), because the available launch types vary on different
 * platforms and configurations.
 */
public external fun setLaunchType(id: String, launchType: LaunchType): Promise<Nothing>?

/**
 * Generate an app for a URL. Returns the generated bookmark app.
 *
 * @param url The URL of a web page. The scheme of the URL can only be "http" or "https".
 * @param title The title of the generated app.
 */
public external fun generateAppForLink(url: String, title: String): Promise<ExtensionInfo>?

/**
 * Checks if the replacement android app can be installed. Errors generated by this API are reported
 * by setting $(ref:runtime.lastError) and executing the function's regular callback.
 */
public external fun canInstallReplacementAndroidApp(): Promise<Boolean>

/**
 * Prompts the user to install the replacement Android app from the manifest. Errors generated by
 * this API are reported by setting $(ref:runtime.lastError) and executing the function's regular
 * callback.
 */
public external fun installReplacementAndroidApp(): Promise<Nothing>?

/**
 * Launches the replacement_web_app specified in the manifest. Prompts the user to install if not
 * already installed.
 */
public external fun installReplacementWebApp(): Promise<Nothing>?

/**
 * Fired when an app or extension has been installed.
 */
public external val onInstalled: Event<OnInstalledListener, Unit> = definedExternally

/**
 * Fired when an app or extension has been uninstalled.
 */
public external val onUninstalled: Event<OnUninstalledListener, Unit> = definedExternally

/**
 * Fired when an app or extension has been enabled.
 */
public external val onEnabled: Event<OnEnabledListener, Unit> = definedExternally

/**
 * Fired when an app or extension has been disabled.
 */
public external val onDisabled: Event<OnDisabledListener, Unit> = definedExternally
